import sys
import os.path
from PIL import Image


# Translate rows into screen memory offsets
lineOffset = [    
    0x0000, 0x0000+0x0400, 0x0000+0x0800, 0x0000+0x0c00, 0x0000+0x1000, 0x0000+0x1400, 0x0000+0x1800, 0x0000+0x1c00,
    0x0080, 0x0080+0x0400, 0x0080+0x0800, 0x0080+0x0c00, 0x0080+0x1000, 0x0080+0x1400, 0x0080+0x1800, 0x0080+0x1c00,
    0x0100, 0x0100+0x0400, 0x0100+0x0800, 0x0100+0x0c00, 0x0100+0x1000, 0x0100+0x1400, 0x0100+0x1800, 0x0100+0x1c00,
    0x0180, 0x0180+0x0400, 0x0180+0x0800, 0x0180+0x0c00, 0x0180+0x1000, 0x0180+0x1400, 0x0180+0x1800, 0x0180+0x1c00,
    0x0200, 0x0200+0x0400, 0x0200+0x0800, 0x0200+0x0c00, 0x0200+0x1000, 0x0200+0x1400, 0x0200+0x1800, 0x0200+0x1c00,
    0x0280, 0x0280+0x0400, 0x0280+0x0800, 0x0280+0x0c00, 0x0280+0x1000, 0x0280+0x1400, 0x0280+0x1800, 0x0280+0x1c00,
    0x0300, 0x0300+0x0400, 0x0300+0x0800, 0x0300+0x0c00, 0x0300+0x1000, 0x0300+0x1400, 0x0300+0x1800, 0x0300+0x1c00,
    0x0380, 0x0380+0x0400, 0x0380+0x0800, 0x0380+0x0c00, 0x0380+0x1000, 0x0380+0x1400, 0x0380+0x1800, 0x0380+0x1c00,
    0x0028, 0x0028+0x0400, 0x0028+0x0800, 0x0028+0x0c00, 0x0028+0x1000, 0x0028+0x1400, 0x0028+0x1800, 0x0028+0x1c00,
    0x00A8, 0x00A8+0x0400, 0x00A8+0x0800, 0x00A8+0x0c00, 0x00A8+0x1000, 0x00A8+0x1400, 0x00A8+0x1800, 0x00A8+0x1c00,
    0x0128, 0x0128+0x0400, 0x0128+0x0800, 0x0128+0x0c00, 0x0128+0x1000, 0x0128+0x1400, 0x0128+0x1800, 0x0128+0x1c00,
    0x01A8, 0x01A8+0x0400, 0x01A8+0x0800, 0x01A8+0x0c00, 0x01A8+0x1000, 0x01A8+0x1400, 0x01A8+0x1800, 0x01A8+0x1c00,
    0x0228, 0x0228+0x0400, 0x0228+0x0800, 0x0228+0x0c00, 0x0228+0x1000, 0x0228+0x1400, 0x0228+0x1800, 0x0228+0x1c00,
    0x02A8, 0x02A8+0x0400, 0x02A8+0x0800, 0x02A8+0x0c00, 0x02A8+0x1000, 0x02A8+0x1400, 0x02A8+0x1800, 0x02A8+0x1c00,
    0x0328, 0x0328+0x0400, 0x0328+0x0800, 0x0328+0x0c00, 0x0328+0x1000, 0x0328+0x1400, 0x0328+0x1800, 0x0328+0x1c00,
    0x03A8, 0x03A8+0x0400, 0x03A8+0x0800, 0x03A8+0x0c00, 0x03A8+0x1000, 0x03A8+0x1400, 0x03A8+0x1800, 0x03A8+0x1c00,
    0x0050, 0x0050+0x0400, 0x0050+0x0800, 0x0050+0x0c00, 0x0050+0x1000, 0x0050+0x1400, 0x0050+0x1800, 0x0050+0x1c00,
    0x00D0, 0x00D0+0x0400, 0x00D0+0x0800, 0x00D0+0x0c00, 0x00D0+0x1000, 0x00D0+0x1400, 0x00D0+0x1800, 0x00D0+0x1c00,
    0x0150, 0x0150+0x0400, 0x0150+0x0800, 0x0150+0x0c00, 0x0150+0x1000, 0x0150+0x1400, 0x0150+0x1800, 0x0150+0x1c00,
    0x01D0, 0x01D0+0x0400, 0x01D0+0x0800, 0x01D0+0x0c00, 0x01D0+0x1000, 0x01D0+0x1400, 0x01D0+0x1800, 0x01D0+0x1c00,
    0x0250, 0x0250+0x0400, 0x0250+0x0800, 0x0250+0x0c00, 0x0250+0x1000, 0x0250+0x1400, 0x0250+0x1800, 0x0250+0x1c00,
    0x02D0, 0x02D0+0x0400, 0x02D0+0x0800, 0x02D0+0x0c00, 0x02D0+0x1000, 0x02D0+0x1400, 0x02D0+0x1800, 0x02D0+0x1c00,
    0x0350, 0x0350+0x0400, 0x0350+0x0800, 0x0350+0x0c00, 0x0350+0x1000, 0x0350+0x1400, 0x0350+0x1800, 0x0350+0x1c00,
    0x03D0, 0x03D0+0x0400, 0x03D0+0x0800, 0x03D0+0x0c00, 0x03D0+0x1000, 0x03D0+0x1400, 0x03D0+0x1800, 0x03D0+0x1c00];

def writeScreen(data,output):
    width = int(560/7/2)
    height = 192
    outputBytes = bytearray(8192)
    for y in range(height):
        for x in range(width):
            outputBytes[lineOffset[y]+x] = data[y][x]
    with open(output, "wb") as binary_file:
        byteCount = binary_file.write(outputBytes)


# Usage: inputFile outputFile width height
# FIXME: use a real command line parser

def main():
    print(";","--------------------------------------------------------------------")
    #outputBytes = bytearray();

    infile = sys.argv[1]
    outfile = sys.argv[2]
    width = int(sys.argv[3])
    height = int(sys.argv[4])

    im = Image.open(infile)
    print(";",infile,im.format, im.size, im.mode)
    im = im.resize((width,height)).convert("1")
    im.save(outfile)
    print(";",outfile,im.format, im.size, im.mode)

    evenData = []
    oddData = []
    for y in range(im.size[1]):
        value = 0
        line = []
        for x in range(im.size[0]):
            if (im.getpixel((x,y)) != 0):
                value = value | (1 << x%7)
            if (x%7 == 6):
                line.append(value)
                #outputBytes.append(value)
                value = 0

        evenData.append(line[0::2])
        oddData.append(line[1::2])

    name = os.path.basename(os.path.splitext(outfile)[0])
    print("{}Even:".format(name))
    for line in evenData:
        print(".byte ",end="")
        print(*line,sep=", ")

    print("{}Odd:".format(name))
    for line in oddData:
        print(".byte ",end="")
        print(*line,sep=", ")

    # if screen size, then dump out binary file
    if (width == 560) and (height == 192):
        writeScreen(evenData, os.path.splitext(outfile)[0]+".0")
        writeScreen(oddData,  os.path.splitext(outfile)[0]+".1")

main()